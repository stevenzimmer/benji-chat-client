import Head from "next/head";
import Link from "next/link";
import { useRouter } from "next/router";
import { useState, useEffect } from "react";
import Cookies from "universal-cookie";
import axios from "axios";
import ClosingAlert from "@material-tailwind/react/ClosingAlert";

import H4 from "@material-tailwind/react/Heading4";

import { yupResolver } from "@hookform/resolvers/yup";
import * as Yup from "yup";

import Button from "@material-tailwind/react/Button";

import { useForm } from "react-hook-form";

const cookies = new Cookies();

import { STREAM_API_URL } from "@/config/index";

export default function Login() {
    const router = useRouter();
    const [err, setErr] = useState("");
    const [isLoading, setIsLoading] = useState(false);

    const schema = Yup.object().shape({
        username: Yup.string().required("Username is a required field"),
        password: Yup.string().required("Please add a password"),
    });

    const {
        register,
        handleSubmit,
        watch,
        formState: { errors },
    } = useForm({
        defaultValues: {
            username: "",
            password: "",
        },
        resolver: yupResolver(schema),
    });

    useEffect(() => {
        const subscription = watch((data) => {
            console.log(data);
            setErr("");
        });

        return () => {
            subscription.unsubscribe();
        };
    }, [watch]);

    const submitForm = async (form) => {
        console.log("submit form ", form);

        setIsLoading(true);

        try {
            // const { username } = form;
            const URL = `${STREAM_API_URL}/auth`;

            const {
                data: { token, fullName, userId, username, hashedPassword },
            } = await axios.post(`${URL}/login`, {
                username: form.username,
                password: form.password,
            });

            // console.log({ data });

            console.log({ token });
            // console.log({ username });
            console.log({ fullName });
            console.log({ userId });

            cookies.set("token", token);
            cookies.set("username", username);
            cookies.set("fullName", fullName);
            cookies.set("userId", userId);
            cookies.set("hashedPassword", hashedPassword);
            console.log({ hashedPassword });

            router.push("/");
            setIsLoading(false);
        } catch (err) {
            console.log({ err });
            if (err.response.data.message) {
                setErr(err.response.data.message);
            }
        }

        setIsLoading(false);
    };

    return (
        <>
            <Head>
                <title>Welcome Back! Sign in to use Benji Chat</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <div className="h-screen">
                <div className="flex h-full justify-start">
                    <div className="lg:w-1/4">
                        <div className="h-full flex items-center justify-center bg-blue-50">
                            <div className="flex justify-center items-center w-full">
                                <div className="w-11/12">
                                    <div className="bg-white p-12 rounded shadow w-full">
                                        <div className="text-center mb-6">
                                            <H4>Sign in</H4>
                                        </div>

                                        <form
                                            onSubmit={handleSubmit(submitForm)}
                                            className={`${isLoading} ? "opacity-75" : "" `}
                                        >
                                            <Link href="/forgot-user/">
                                                <a href="">Forgot Username?</a>
                                            </Link>
                                            <br />
                                            <input
                                                autoComplete="off"
                                                type="text"
                                                {...register("username")}
                                                placeholder="User name"
                                                className={`border ${
                                                    errors.username
                                                        ? " border-red-500"
                                                        : ""
                                                }`}
                                            />
                                            <br />
                                            {errors.username &&
                                                errors.username.message}
                                            <Link href="/reset/">
                                                <a href="">Forgot Password?</a>
                                            </Link>
                                            <br />
                                            <input
                                                type="password"
                                                autoComplete="off"
                                                {...register("password")}
                                                placeholder="Password"
                                            />
                                            <br />
                                            {errors.password &&
                                                errors.password.message}

                                            {!err && (
                                                <Button
                                                    color="lightBlue"
                                                    buttonType="filled"
                                                    size="regular"
                                                    rounded={false}
                                                    block={false}
                                                    iconOnly={false}
                                                    ripple="light"
                                                >
                                                    Sign in
                                                </Button>
                                            )}
                                        </form>
                                        {err && (
                                            <>
                                                <ClosingAlert
                                                    color="red"
                                                    onClick={(e) => {
                                                        setErr("");
                                                    }}
                                                >
                                                    {err}
                                                </ClosingAlert>
                                            </>
                                        )}

                                        <div>
                                            {`Don't yet have an account? `}
                                            <Link href="/register/">
                                                <a>Register here</a>
                                            </Link>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div className="lg:w-3/4">
                        <div className="h-full w-full bg-blue-100"></div>
                    </div>
                </div>
            </div>
        </>
    );
}
